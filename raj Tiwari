#include <stdio.h>
#include <math.h>
#define MAXSIZE 10
#define M 4 // Size of checksum
#define ONES ((1 << M) - 1) // 111... upto size of checksum

int checksumCalc(int data[], int len, int checksum)
{
    int sum = 0;
    // Calculate the sum of the data
    for(int i = 0; i < len; i++)
        sum += data[i];
    sum += checksum;
    // If sum bigger than size of checksum, Wrap the sum
    if(ceil(log2(sum)) > M)
    {
        int wrap = sum >> M;
        sum = (sum % (wrap << M)) + wrap;
    }
    int onescomp = ONES ^ sum; // Bitwise XOR of Sum with 1111...
    return onescomp;
}

int main()
{
    int len, data[MAXSIZE];
    printf("====================19BCE0565====================\n\n\n");
    printf("Enter number of data being sent: ");
    scanf("%d", &len);
    printf("Enter data between 0 and %d: ", ONES);
    for(int i = 0; i < len; i++)
        scanf("%d", &data[i]);
    int checksum = checksumCalc(data, len, 0);
    printf("=======Sender=======\n");
    printf("Checksum is: %d\nTransmitting...\n\n", checksum);
    // checksum -= 2; // Introducing Error
    int reject = checksumCalc(data, len, checksum);
    printf("======Receiver======\n");
    if(reject)
        printf("Error in transmission. Rejected!\n\n");
    else
        printf("Data received with no errors!\n\n");
}
 63  distanceVector.c 
@@ -0,0 +1,63 @@
#include <stdio.h>

struct Router
{
    unsigned dist[20];
    unsigned from[20];
} route[10];

void startMessage()
{
    printf("=====================================\n");
    printf("              19BCE0565\n");
    printf("=====================================\n\n");
}

int main()
{
    int distMatrix[20][20];
    int numOfNodes, i, j, k, count = 0;

    startMessage();
    printf("\nEnter the number of nodes : ");
    scanf("%d", &numOfNodes);

    // Get Distance Matrix
    printf("\nEnter the distance matrix :\n");
    for (i = 0; i < numOfNodes; i++)
    {
        for (j = 0; j < numOfNodes; j++)
        {
            scanf("%d", &distMatrix[i][j]);
            distMatrix[i][i] = 0;
            route[i].dist[j] = distMatrix[i][j];
            route[i].from[j] = j;
        }
    }

    do
    {
        count = 0;
        for (i = 0; i < numOfNodes; i++) 
            for (j = 0; j < numOfNodes; j++)
                for (k = 0; k < numOfNodes; k++)
                    if (route[i].dist[j] > distMatrix[i][k] + route[k].dist[j])
                    { 
                        // Calculate the minimum distance
                        route[i].dist[j] = route[i].dist[k] + route[k].dist[j];
                        route[i].from[j] = k;
                        count++;
                    }
    } while (count != 0);

    // Display Distance Vectors 
    for (i = 0; i < numOfNodes; i++)
    {
        printf("\n\n For router %d\n", i + 1);
        for (j = 0; j < numOfNodes; j++)
        {
            printf("\t\nnode %d via %d Distance %d ", j + 1, route[i].from[j] + 1, route[i].dist[j]);
        }
    }
    printf("\n\n");
}
 179  encryption.c 
@@ -0,0 +1,179 @@
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>

long int p, q, n, t, flag, e[100], d[100], temp[100], j, m[100], en[100], i;
char msg[100];

int prime(long int);
void ce();
long int cd(long int);
void encrypt();
void decrypt();

void clrscr()
{
    printf("\e[1;1H\e[2J");
}

void startMessage()
{
    printf("=====================================\n");
    printf("              19BCE0565\n");
    printf("=====================================\n\n");
}

void main()
{
    clrscr();
    startMessage();
    printf("\nEnter First Prime Number\n");
    scanf("%ld", &p);
    flag = prime(p);
    if (flag == 0)
    {
        printf("\nNumber is not Prime!\n");
        exit(EXIT_FAILURE);
    }

    printf("\nEnter Second Prime Number\n");
    scanf("%ld", &q);
    flag = prime(q);
    if (flag == 0 || p == q)
    {
        printf("\nNumber is not Prime or Both input are equal!\n");
        exit(EXIT_FAILURE);
    }

    printf("\nENTER MESSAGE\n");
    fflush(stdin);
    scanf("%s",msg);

    for (i = 0; msg[i] != '\0'; i++)
        m[i] = msg[i];

    n = p * q;
    t = (p - 1) * (q - 1);

    ce();

    printf("\nPOSSIBLE VALUES OF e AND d ARE\n");

    for (i = 0; i < j - 1; i++)
        printf("\n%ld\t%ld", e[i], d[i]);

    encrypt();
    decrypt();
}

int prime(long int pr)
{
    int i;
    j = sqrt(pr);
    for (i = 2; i <= pr / 2; i++)
    {
        if (pr % i == 0)
            return 0;
    }

    return 1;
}

void ce()
{
    int k = 0;

    for (i = 2; i < t; i++)
    {
        if (t % i == 0)
            continue;

        flag = prime(i);
        if (flag == 1 && i != p && i != q)
        {
            e[k] = i;
            flag = cd(e[k]);
            if (flag > 0)
            {
                d[k] = flag;
                k++;
            }

            if (k == 99)
                break;
        }
    }
}

long int cd(long int x)
{
    long int k = 1;

    while (1)
    {
        k = k + t;
        if (k % x == 0)
            return (k / x);
    }
}

void encrypt()
{

    long int pt, ct, key = e[0], k, len;

    i = 0;
    len = strlen(msg);

    while (i != len)
    {
        pt = m[i];
        pt = pt - 96;
        k = 1;

        for (j = 0; j < key; j++)
        {
            k = k * pt;
            k = k % n;
        }

        temp[i] = k;
        ct = k + 96;
        en[i] = ct;

        i++;
    }
    en[i] = -1;

    printf("\nTHE ENCRYPTED MESSAGE IS\n");
    for (i = 0; en[i] != -1; i++)
        printf("%c", (int)en[i]);
}

void decrypt()
{
    long int pt, ct, key = d[0], k;
    i = 0;
    while (en[i] != -1)
    {
        ct = temp[i];
        k = 1;
        for (j = 0; j < key; j++)
        {
            k = k * ct;
            k = k % n;
        }

        pt = k + 96;
        m[i] = pt;

        i++;
    }
    m[i] = -1;

    printf("\nTHE DECRYPTED MESSAGE IS\n");
    for (i = 0; m[i] != -1; i++)
        printf("%c", (int)m[i]);
    prin
